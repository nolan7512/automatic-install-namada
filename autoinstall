#!/bin/bash

echo -e "\033[0;34m"
echo "    A        DDDDDD        A       M       M      A      N       N"
echo "   A:A       D      D     A:A      M M  M  M     A:A     N  N    N"
echo "  A   A      D      D    A   A     M   M   M    A   A    N   N   N"
echo " A:AAA:A     D      D   A:AAA:A    M       M   A:AAA:A   N    N  N"
echo "A       A    DDDDDD    A       A   M       M  A       A  N       N"
echo -e "\033[0;32m"
echo -e "\t\t\t\t\t\t\tadamanlab.xyz"
echo -e "\e[0m"



function addToPath {
  source $HOME/.bash_profile
  PATH_EXIST=$(grep "${1}" $HOME/.bash_profile)
  if [ -z "$PATH_EXIST" ]; then
    echo "export PATH=\$PATH:${1}" >> $HOME/.bash_profile
  fi
}

addToPath


read -p "Enter WALLET name:" WALLET
echo 'export WALLET='$WALLET
read -p "Enter your ALIAS :" ALIAS
echo 'export ALIAS='$ALIAS
# Asking the user if they are a Pre-Genesis Validator
read -p "Are you a Pre-Genesis Validator? Enter 1 for Yes, 0 for No: " is_post_genesis
read -p "Enter your PORT (for example 17,18,19... default port=26):" PORT
echo 'export PORT='$PORT

# set vars
echo "export WALLET="$WALLET"" >> $HOME/.bash_profile
echo "export ALIAS="$ALIAS"" >> $HOME/.bash_profile
echo "export PORT="$PORT"" >> $HOME/.bash_profile
echo "export TM_HASH="v0.1.4-abciplus"" >> $HOME/.bash_profile
echo "export CHAIN_ID="shielded-expedition.88f17d1d14"" >> $HOME/.bash_profile
echo "export BASE_DIR="$HOME/.local/share/namada"" >> $HOME/.bash_profile
source $HOME/.bash_profile

printLine
echo -e "Alias:        \e[1m\e[32m$ALIAS\e[0m"
echo -e "Wallet:         \e[1m\e[32m$WALLET\e[0m"
echo -e "Chain id:       \e[1m\e[32m$CHAIN_ID\e[0m"
echo -e "Node custom port:  \e[1m\e[32m$PORT\e[0m"
echo -e "Base directory:  \e[1m\e[32m$BASE_DIR\e[0m"
printLine
sleep 1

printGreen "1. Installing go..." && sleep 1
# install go, if needed
cd $HOME
! [ -x "$(command -v go)" ] && {
VER="1.20.3"
wget "https://golang.org/dl/go$VER.linux-amd64.tar.gz"
sudo rm -rf /usr/local/go
sudo tar -C /usr/local -xzf "go$VER.linux-amd64.tar.gz"
rm "go$VER.linux-amd64.tar.gz"
[ ! -f ~/.bash_profile ] && touch ~/.bash_profile
echo "export PATH=$PATH:/usr/local/go/bin:~/go/bin" >> ~/.bash_profile
source $HOME/.bash_profile
}
[ ! -d ~/go/bin ] && mkdir -p ~/go/bin

echo $(go version) && sleep 1

addToPath


printGreen "2. Updating packages..." && sleep 1
sudo apt update

printGreen "3. installing dependencies..." && sleep 1
sudo apt install curl git wget htop tmux build-essential jq make lz4 gcc unzip -y
sudo apt-get install -y git-core libssl-dev pkg-config libclang-12-dev protobuf-compiler

printGreen "4. Installing Rust & Cargo..." && sleep 1
# install rust and cargo
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
source $HOME/.cargo/env

printGreen "5. Installing Protocol Buffers..." && sleep 1
cd $HOME
curl -L -o protobuf.zip https://github.com/protocolbuffers/protobuf/releases/download/v24.4/protoc-24.4-linux-x86_64.zip
mkdir protobuf_temp && unzip protobuf.zip -d protobuf_temp/
sudo cp protobuf_temp/bin/protoc /usr/local/bin/
sudo cp -r protobuf_temp/include/* /usr/local/include/
rm -rf protobuf_temp protobuf.zip
sleep 1
echo done

printGreen "6. Installing CometBFT..." && sleep 1
# Install CometBFT
cd $HOME
rm -rf $HOME/cometbft
git clone https://github.com/cometbft/cometbft.git
cd $HOME/cometbft
git checkout v0.37.2
make build
sudo cp $HOME/cometbft/build/cometbft /usr/local/bin/
cometbft version
sleep 1
echo done

printGreen "7. Installing binaries..." && sleep 1
# download binary
cd $HOME
rm -rf $HOME/namada
git clone https://github.com/anoma/namada
cd $HOME/namada
wget https://github.com/anoma/namada/releases/download/v0.31.6/namada-v0.31.6-Linux-x86_64.tar.gz
tar -xvf namada-v0.31.6-Linux-x86_64.tar.gz
rm namada-v0.31.6-Linux-x86_64.tar.gz
cd namada-v0.31.6-Linux-x86_64
sudo mv namad* /usr/local/bin/
if [ ! -d "$HOME/.local/share/namada" ]; then
    mkdir -p "$HOME/.local/share/namada"
fi
sleep 1
echo done

printGreen "8. Joining network..." && sleep 1
# Executing actions based on the user's response
if [ "$is_post_genesis" -eq 1 ]; then
    # Joining network as Pre-Genesis Validator
    printRed "Please place the pre-genesis folder at this path $HOME/.local/share/namada then press enter"
    read -p ""
    cd $HOME
    rm -rf $HOME/.local/share/namada/${CHAIN_ID}
    namada client utils join-network --chain-id $CHAIN_ID --genesis-validator $ALIAS
else
    # Joining network as Full Nodes or Post-Genesis Validator
    cd $HOME
    namada client utils join-network --chain-id $CHAIN_ID
fi
sleep 1
echo done

printGreen "9. Configuring custom ports..." && sleep 1
# Set custom ports in config.toml
sed -i.bak -e "s%:26658%:${PORT}658%g; s%:26657%:${PORT}657%g; s%:26656%:${PORT}656%g; s%:26545%:${PORT}545%g; s%:8545%:${PORT}545%g; s%:26660%:${PORT}660%g" $HOME/.local/share/namada/${CHAIN_ID}/config.toml
sleep 1
echo done


printGreen "10. Creating service file and starting node..." && sleep 1
# create service file
sudo tee /etc/systemd/system/namadad.service > /dev/null <<EOF
[Unit]
Description=namada
After=network-online.target

[Service]
User=$USER
WorkingDirectory=$BASE_DIR
Environment=TM_LOG_LEVEL=p2p:none,pex:error
Environment=NAMADA_CMT_STDOUT=true
Environment=NAMADA_LOG=info
ExecStart=$(which namada) node ledger run
StandardOutput=syslog
StandardError=syslog
Restart=always
RestartSec=10
LimitNOFILE=65535

[Install]
WantedBy=multi-user.target
EOF

# enable and start service
sudo systemctl daemon-reload
sudo systemctl enable namadad
sudo systemctl restart namadad && sudo journalctl -u namadad -f
